.NET Framework Security

nant -nologo -targetframework:mono-2.0 -D:debug=true test

https://home.comcast.net/~jesse98/public/Smokey

https://home.comcast.net/~jesse98/public/Mono.Cecil.dll
https://home.comcast.net/~jesse98/public/smokey-0.4.0.0.tar.gz
https://home.comcast.net/~jesse98/public/System.Xml.dll.txt

mono --debug bin/smokey.exe -set:ignoreList:SysIgnore.txt /Library/Frameworks/Mono.framework/Libraries/mono/2.1/mscorlib.dll > tmp.txt
mono --debug bin/smokey.exe -set:ignoreList:SysIgnore.txt /Library/Frameworks/Mono.framework/Libraries/mono/2.1/System.Core.dll > tmp.txt
mono --debug bin/smokey.exe -set:ignoreList:SysIgnore.txt /Library/Frameworks/Mono.framework/Libraries/mono/2.1/System.Xml.Core.dll > tmp.txt
mono --debug bin/smokey.exe -set:ignoreList:SysIgnore.txt /Library/Frameworks/Mono.framework/Libraries/mono/2.0/System.Windows.Forms.dll > tmp.txt

mono bin/smokey.exe bin/smokey.exe	
	27.065				1.1
	24.194				1.0
	31.63 seconds		
	2.818 seconds		
	
mono bin/smokey.exe -set:ignoreList:SysIgnore.txt /ex6/lib/mono/gac/System/2.0.0.0__b77a5c561934e089/System.dll > tmp.txt
	87.082 				1.0
	19.159			
	20.247
	32.081
mono bin/smokey.exe -set:ignoreList:SysIgnore.txt /ex6/lib/mono/gac/System/2.0.0.0__b77a5c561934e089/System.dll > tmp.txt
	62.015
					
<http://msdn2.microsoft.com/en-us/library/ee1hzekz(VS.80).aspx>
Essential .NET Volume 1, The Common Language Runtime - Don Box

/Library/Frameworks/Mono.framework/Versions/1.9/lib/mono/gac/gtk-sharp/2.10.0.0__35e10195dab3c99f/gtk-sharp.dll			  

212 rules
102 gendarme
199 fxcop

* Work on a makefile:
	- do a checkin
	- should we use the nunit package?
	- do we want DEBUG to default to off or on?
	- do we need to version anything besides the app?
	- add  -warnaserror+ to debug flags
	- need to support PROFILE
	- add a smoke target
	- add a clean target
	- add a tar target
	- add help, install, and uninstall targets
	- remove BumpBuildNumber.sh, nant.build, install.sh, and uninstall.sh
* Support DBC via a python script
	- google for dbc and c#
	- google for c# parser/grammar
	- if an assert fails exception should include assert expr and names/values for the
	  variables
	- post should support old(argName)
	- inject calls to Invariant if one is present, optionally disable via an attibute
	  or comment
* Can probably use KeyedCollection in places. Might want to check gear too.
* NonSerializableField is all messed up:
	public sealed class Value
	{
		public Value()
		{
			m_instance = 0;
		}
	
		public Value(int value)
		{
			m_instance = value;
		}
		
		public int TheValue
		{
			get {return m_instance;}
		}
		
		private int m_instance;
	}
	
	[Serializable]
	public sealed class CocoaException : Exception
	{
		public CocoaException()
		{
		}
	
		public CocoaException(int value)
		{
			m_instance = new Value(value);
		}
		
		private CocoaException(SerializationInfo info, StreamingContext context) : base(info, context)
		{
	//		m_instance = new Value(info.GetInt32("NSObject"));
		}
	
		public override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			base.GetObjectData(info, context);
	//		
	//		info.AddValue("NSObject", m_instance.TheValue);
		}
	
		public int Value
		{
			get {return m_instance.TheValue;}
		}
		
	//	[NonSerialized]
		private Value m_instance;
	}
	
	public class Program
	{
		public static void Main()
		{ 		
			MemoryStream stream = new MemoryStream();
			BinaryFormatter formatter = new BinaryFormatter();
			formatter.Serialize(stream, new CocoaException(200));
	
			stream.Seek(0, SeekOrigin.Begin);
			CocoaException e = (CocoaException) formatter.Deserialize(stream);
			Console.WriteLine(e.Value);
		}
	} 
* AttributesNeedUsage should not fire for abstract types.
* UnusedMethod should not complain about std exception ctors.
* UnusedMethod should not complain if NewMethodAttribute or OverrideMethodAttribute.
* NotInstantiated should not complain if ExportClassAttribute.
* AssemblyInfo examples in xml need to explicitly include System.
* UseStrongName should not complain about exe's?
* UseJurassicNaming does a crappy job printing bad fields.
* CastOpAlternative should not complain if FromType is missing.
* File contains no types that match the class name.
* Avoid reregisterforfinalize.
* DisposeDoesStaticRemove language (maybe even the rule).
* Wasn't able to disable NoStaticRemove.
* CircularReference seems kind of annoying.
* Fix Dipose language in XML: can touch non-IDisposable fields.
* FinalizerTouchesDisposableRule
	- would need to do some code flow based on the disposing flag
* Const2
	internal static class Duration
	{
		public const double kEventDurationSecond            = 1.0;
		public const double kEventDurationMillisecond       = kEventDurationSecond/1000;
	}
* ReadOnlyArrayRule should only apply to exterally visible fields.
* Might want to emphasize that Dispose should alays be used. If not unmanaged resources held
  by managed resources (e.g. IntPtr[]) may not be freed.
* Do we catch IntPtr[] and List<IntPtr> when we look for unmanaged fields?
* Tweak static remove rule: finalizers are called on app domain exit apparently.
* UnusedMethodRule:
	- sort methods by type
	- don't complain about event add and remove methods
* XorHashRule
	- ex-or throws away half the bits
	- shan has three instances of this
* SealPublicRule
	- no new protected members
	- no new virtual methods
	- class is public but not sealed
	- optional severity? or base class must be Object?
* Selected exceptions are default constructed (default ctor is for serialization).
* Probably want the fxcop override changes argument name rule
	- important for languages like VB (and ruby?) that support named arguments
* GetObjectData examples in the xml need to validate args.
* Reference nunit using "-pkg:mono-nunit"?
* AvoidUnusedParametersRule
	- need a way to easily disable this, maybe args prefixed with "dummy" or "unused"
* DeserializeOptionalFieldRule
* Add a few more fxcop rules.
* Add a few more gendarme rules.
* IdenticalMethods isn't determinstic.
* Might want a rule to verify that gui resources are localized.
* PInvoke entry points should exist
* Gendarme reports file and line numbers for .net
* Really need to fix ftest in release.
* Would be nice if nant spit out a better error message if Smokey.keys is missing.
* RandomUsedOnce
	/Users/jessejones/New_Files/mono-1.9/mcs/class/System.Web/System.Web/HttpRequest.cs:669
* Verify that the name passed to ArgumentNullException matches an argument.
* http://groups.google.com/group/gendarme/web/rules
* Implement more FxCop rules:
	- Globalization Warnings
		Specify CultureInfo, once find references works in visisect
		Specify IFormatProvider, once find references works in visisect
	- Maintainability Warnings
	- Naming Warnings
* Try YourKit Profiler
	http://www.theserverside.net/news/thread.tss?thread_id=48141
* Foreign key but no update rule.
* Should we have a pendantic severity which is disabled by default?
* Re-add MethodCanBeMadeStaticRule but disable it by default.
* Make sure .net generated assemblies smoke OK. Reflector seems a little bit whacked: lot's of names
  are ?.
* Watchdog timeout should be configurable.
* RedundantPredicate
	- A && A			A
	- A || A			A
	- A && !A			false
	- A || !A			true
	- probably need some support for building expressions
* Rename the PubliclyVisible method ExternallyVisible.
* Try profiling on linux.
* Remove support for ignoreList config setting.
* Handle the CompilerGenerated types and methods in the dispatcher not the rules. This is tricky to
  do: we want to do stuff like visting the body of anonymous methods to see what they call for example.
* AssemblyResolver.Resolver.Resolve can be used to get a definition from a reference.
  a list of violations without messing with System.Process or external files.
* Unit tests take too long to run. Maybe we can cleanup better?
* Try heapbuddy.
* Remove OLD_CHANGE_LOG from tarballs?
* Need install.bat and uninstall.bat
* Might want to support getting custom assembly paths from an environment variable.
* Look at C# 3.0:
	- extension methods
			public static class Extensions 
			{ 
				public static int ToInt32(this string s) 
				{ 
					return Int32.Parse(s); 
				}
			}
			could add Push, Pop, Front, and Back to List<>
	- automatically generated properties, no manual writing of getters and setters
			public string Name {get; set;}
	- implicitly typed arrays
			var a = new[] { 1, 10, 100, 1000 };    // int[]
	- implicitly typed local variables
			var orders = new Dictionary<int,Order>();
			foreach (var n in numbers) Console.WriteLine(n);
	- lambda expressions, this will make DoubleDisatch::Register nicer (once type inference is in)?
			x => x + 1       // Implicitly typed, expression body
			x => { return x + 1; }   // Implicitly typed, statement body
			(int x) => x + 1     // Explicitly typed, expression body
	- null coalescing operator
  		string fileName = tempFileName ?? "Untitled"
* Add a rejected file. Mention possibility of a (disabled by default) nitpicky level.
* Add a script to update doc comments with DBC info (including invariants).
* Could use threading to improve performance on multi-processors.
* Create table but no primary key.
* Need to work with pdb files
	- Mono.CompilerServices does not work with pdb files
	- gendarme has a Symbols class which is supposed to work with .net
	/Users/jessejones/New_Files/CustomFXCopRules_VS2003/bin/Debug/CustomFXCopRules_VS2003.pdb
	/Users/jessejones/New_Files/log4net-1.2.10/bin/net/2.0/debug/log4net.pdb
	/Users/jessejones/Source/Old Stuff/cocoV4/coco/protocol/modules/Configurator/ConfigUtils/XP/bin/Debug/ConfigUtils.pdb
* If --html is specified colorize example code. Should also support wiki formatting...
  already using * for bulleted lists.
* Would be nice if we smoked the xml.
* as not followed by a null check (null deref should catch this). What about asserts?
* Add some more profiles:
	- "public API review" profile, a "bug review" profile, a "full analysis review" profile?
	- moonlight?
* Framework needs to be in its own assembly so that it can be separately
  versioned (so custom rules don't have to be recompiled if core changes),
* NonLocalizedException
	- allow rule to be disabled on the exception type?
* Using stuff like demand FileIOPermission from non-system code
	- don't need to do this if you're just calling into the system libs
	- http://msdn2.microsoft.com/en-us/library/9kc0c6st(VS.80).aspx
	- make this informational
* Assembly description should include an overall version number.
* Review all the rules. Look for stuff like a rule that can also be done on private types.
* Equals is called with a null argument.
* A method that throws an exception on a null argument is called with null:
	- could do this with a --inter-procedural option
	- or cache null methods for assembly strong names
	- or do a prepass on the system assemblies and hope they dont change much
* UnimplementedRule
	- call to a method which throws NotImplementedException
* http://semmle.com/documentation/
* ObsoleteRule
	- code calls an obsolete method
* Unbounded collection add 
	- list/dict, later hashset
	- check for adds in non-ctors
	- check for remove, clear, store field
	- be sure to check 3.5 methods
* There are cyclic assembly references (transitive).
* Can we make use of extra type or spec info? For example units.
* Public dispose + threads
	- http://blogs.msdn.com/cbrumme/archive/2003/04/19/51365.aspx
* http://msdn2.microsoft.com/en-us/library/ms182293(VS.80).aspx
* If file/line can't be shown then show offset instead.
* VisitEnd methods should null fields or clear collections.
* Would be nice if ftest worked in release.
* MarshalStringsInPInvokeDeclarationsRule
* UseManagedAlternativesToPInvokeRule
	- might want to do a google code search for p/invoke
* Call GetLastError immediately after P/Invoke
* A temporary is modified but not used
	- the local is overwritten or not used after the method call
	- probably need to check the method body for a store
	- can do this lazily and cache result for reasonable efficiency
* Not implemented
		  Avoid excessive parameters on generic types
		  Avoid namespaces with few types
		  Avoid out parameters
		  Default parameters should not be used
		  Do not catch general exception types (we do warn if this is done with an empty catch block)
		  Do not declare protected members in sealed types (compiler warns (at level 4))
		  Do not declare static members on generic types
		  Do not declare virtual members in sealed types (compiler catches)
		  Do not expose generic lists
		  Do not nest generic types in member signatures
		  Do not overload operator equals on reference types
		  Do not pass types by reference
		  Enum Storage should be Int32
		  Generic methods should provide type parameter
		  Indexers should not be multidimensional
		  Interface methods should be callable by child types
		  Members should not expose certain concrete types
		  Override operator equals on overloading add and subtract
		  Properties should not be write only
		  Replace repetitive arguments with params array
		  String uri overloads call system uri overloads
		  Uri parameters should not be strings
		  Uri properties should not be strings
		  Uri return values should not be strings
		  Use events where appropriate
		  Use generics where appropriate
		  Use integral or string argument for indexers
		  Use properties where appropriate
		  Do not hardcode locale specific strings
		  most of the Interoperability rules
		  mobility warnings
		  Identifiers should not match keywords
		  Review unused parameters
		  Use managed equivalents of win
		  Secure Serialization Constructors
		  Specify marshaling for pinvoke string arguments
* TextReport isn't localizable.
* Get the FXCop rules working.
	<http://msdn2.microsoft.com/en-us/library/ee1hzekz(VS.80).aspx>
* Possible new rules:
	- http://mono-soc-2007.googlecode.com/svn/trunk/lukasz/
	- http://mono-soc-2007.googlecode.com/svn/trunk/nestor/
	- http://mono-soc-2007.googlecode.com/svn/trunk/nidhi/rules/
	- http://msdn.microsoft.com/msdnmag/issues/04/09/Bugslayer/
	- <http://msdn2.microsoft.com/en-us/library/ee1hzekz(VS.80).aspx>
	- names diff by case, property with same name as result type, maybe these should be nitpicky level
	- IFormattable.ToString that doesn't call ICustomFormatter.Format
	- switch (or if) covers all enum values w/o a default
	- no classes with only nested types
	- deadcode nitpick (use callgraph)
	- deadlock? (use callgraph), erasor algorithm
	- publicly visible const field (breaking change if it's changed)?
	- prefer no null events? http://blogs.msdn.com/jaybaz_ms/archive/2004/09/16/230681.aspx
	- all classes are public and there are more than five classes
	- argument isn't used
* Bogus Gendarme rules:
	- DoubleCheckLockingRule, just use a singleton class
	  maybe we can have a rule for custom singleton class?
	
* Release checklist:
	- search for TODO
	- use mono --debug bin/smokey_d.exe -check-xml>tmp.txt
	- nant -D:debug=true smoke>tmp.txt
	- nant -D:debug=true test
	- nant -D:debug=true ftest
	- nant -D:optimize=true smoke>tmp.txt
	- nant -D:optimize=true test
	- nant -D:optimize=true ftest (doesnt work)
	- profile
		rm bin/smokey.exe				# nant doesn't rebuild if just a define changed
		nant -D:profile=true app
		look at stdout
	- review severity abd breaking of new rules
	- make sure custom lib builds
	- make sure custom test smokes
	- make sure custom test runs
	- try on .net (smoke fxcop)
	- smoke /Users/jessejones/New_Files/Reflector\ Folder/Reflector.exe
	- smoke a mono assembly, eg mscorlib.dll
	- smoke a mono assembly with -profile=system and see if any additional rules should be disabled
	- make sure everything is checked in
	- use svn log -r 1:HEAD > CHANGE_LOG
	- update CHANGES file
	- make sure AssemblyVersion number is ok (for all the assemblies)
	- update version number in nant file (for tar files)
	- update SmokeyVersion on old web site
	- install
	- update README and wiki
	- we require linq so need mono 1.9.
	- deprecate ignoreList setting
	- add dictionary setting
	- add profile setting
	- localize config?
	- mono --debug bin/smokey_d.exe -generate-html-violations:violations
	- smoke -profile=system -html -out:report.html /Users/jessejones/New_Files/mono-1.9/mcs/class/lib/default/System.Drawing.dll
	- upload
		report.html
		violations
		smokey_bin
		smokey_src
		latest cecil
	- update googlecode description
	- update wiki todo
	- send an announcement
	- make sure everything is checked in
	- do the following (be sure to fix the versions):
		svn copy file:///Users/jessejones/projects/Smokey file:///Users/jessejones/projects/releases/smokey-1.X.0.0 -m "Tagging 1.X.0.0"
	
* Write a xxx rule:	
	- update the xml
	- add a rule which always return success
	- update the config file
	- add a test
	- implement the rule
	- update functional test 

./configure --prefix=/Library/Frameworks/Mono.framework/Versions/1.2.5 
sudo make install
ln -s 1.2.5 Current



Opcode			Operand Type
Call			MethodReference
Callvirt		MethodReference
Castclass		TypeDefinition or TypeReference
Isinst			TypeDefinition or GenericInstanceType 
Ldarg			int
Ldloc			int or VariableDefinition
Ldloca			VariableDefinition
Ldarga			ParameterDefinition 
Newobj			MethodReference
Switch			Instruction[]
Unbox			TypeDefinition or TypeReference

