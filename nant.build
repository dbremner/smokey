<?xml version="1.0"?>
<project name = "smokey" default = "app" basedir = ".">
	<description>Typical usage is: nant -nologo -D:debug=true [targets].

Properties (set with -D):
debug        generate debugging info, defaults to false
checked      set default context to checked, defaults to value of debug
optimize     enables code optimizations, defaults to not debug
profile      enables smokey's built in profiler, defaults to false
</description>
	
	<!-- define some properties used to configure various settings -->
	<property name = "debug" value = "false" overwrite = "false"/>
	<property name = "profile" value = "false" overwrite = "false"/>

	<if test = "${debug}">
		<property name = "checked" value = "true" overwrite = "false"/>
		<property name = "optimize" value = "false" overwrite = "false"/>
		<property name = "extension" value = "_d" readonly = "true"/>
	</if>
	<if test = "${not debug}">
		<property name = "checked" value = "true" overwrite = "false"/>
		<property name = "optimize" value = "true" overwrite = "false"/>
		<property name = "extension" value = "" readonly = "true"/>
	</if>
	
	<if test = "${profile}">
		<property name = "defines" value = "PROFILE" readonly = "true"/>
	</if>
	<if test = "${not profile}">
		<property name = "defines" value = "" readonly = "true"/>
	</if>

	<!-- configure natty tool -->
	<property name = "natty" value = "hidden:versionApp,versionEvildoer,versionFunctest,versionMiscEvil"/>
	<property name = "natty" value = "default:test1"/>

	<!-- build the smokey exe -->
	<target name = "versionApp">
		<exec program = "BumpBuildNumber.sh" failonerror = "true" commandline = "source/internal/AssemblyVersion.cs"/>
	</target>
		
	<target name = "app" depends = "versionApp" description = "compiles the smokey executable">
		<csc target = "exe" output = "bin/smokey${extension}.exe" keyfile = "Smokey.keys"
		debug = "${debug}" doc = "docs.xml" define = "${defines}" checked = "${checked}" optimize = "${optimize}" warnaserror = "true">
			<references>
				<include name = "Mono.CompilerServices.SymbolWriter.dll"/>
				<include name = "Mono.Cecil.dll"/>
				<include name = "System.Configuration.dll"/>
			</references>
			<resources basedir = "source/internal/rules/xml">
				<include name="*.xml"/>
			</resources>
			<sources basedir = "source">
				<include name = "app/*.cs"/>
				<include name = "internal/*.cs"/>
				<include name = "internal/rules/*/*.cs"/>
				<include name = "framework/**/*.cs"/>
			</sources>
		</csc>
	</target>
		
	<!-- build the unit test library -->
	<target name = "tests" description = "compiles the smokey unit tests">
		<csc target = "library" output = "bin/tests${extension}.dll"
		debug = "${debug}" define = "TEST" checked = "${checked}" optimize = "${optimize}" warnaserror = "true">
			<references>
				<include name = "nunit.framework.dll"/>
				<include name = "Mono.CompilerServices.SymbolWriter.dll"/>
				<include name = "Mono.Cecil.dll"/>
				<include name = "System.Configuration.dll"/>
				<include name = "System.Data.dll"/>
				<include name = "System.Windows.Forms.dll"/>
			</references>
			<resources basedir = "source/internal/rules/xml">
				<include name="*.xml"/>
			</resources>
			<sources basedir = "source">
				<include name = "internal/AssertTraceListener.cs"/>
				<include name = "internal/Break.cs"/>
				<include name = "internal/GetOptions.cs"/>
				<include name = "internal/Ignore.cs"/>
				<include name = "internal/Reformat.cs"/>
				<include name = "framework/**/*.cs"/>
				<include name = "internal/rules/*/*.cs"/>
				<include name = "tests/*.cs"/>
				<include name = "tests/rules/*.cs"/>
				<include name = "tests/rules/*/*.cs"/>
			</sources>
		</csc>
	</target>
				
	<!-- build the evildoer assembly -->
	<target name = "versionEvildoer">
		<exec program = "BumpBuildNumber.sh" failonerror = "true" commandline = "extras/evildoer/AssemblyVersion.cs"/>
	</target>
		
	<target name = "evildoer" depends = "versionEvildoer" description = "compiles the evildoer ftest assembly">
		<csc target = "library" output = "bin/evildoer${extension}.dll"
			debug = "${debug}" checked = "${checked}" optimize = "${optimize}">
			<references>
				<include name = "System.Windows.Forms.dll"/>
			</references>
			<resources basedir = "extras/evildoer">
				<include name = "*.xml"/>
			</resources>
			<sources basedir = "extras/evildoer">
				<include name = "*.cs"/>
			</sources>
		</csc>
	</target>
				
	<!-- build the miscevil assemblies -->
	<target name = "versionMiscEvil">
		<exec program = "BumpBuildNumber.sh" failonerror = "true" commandline = "extras/miscevil/AssemblyVersion.cs"/>
	</target>
		
	<target name = "NoSecurity" depends = "versionMiscEvil,FullTrust" description = "compiles the NoSecurity ftest assembly">
		<csc target = "exe" output = "bin/NoSecurity${extension}.exe"
			debug = "${debug}" checked = "${checked}" optimize = "${optimize}">
			<references>
				<include name = "System.Windows.Forms.dll"/>
			</references>
			<resources basedir = "extras/miscevil">
				<include name = "NoSecurity.xml"/>
			</resources>
			<sources basedir = "extras/miscevil">
				<include name = "AssemblyVersion.cs"/>
				<include name = "NoSecurity.cs"/>
			</sources>
		</csc>
	</target>
				
	<target name = "FullTrust" depends = "versionMiscEvil" description = "compiles the FullTrust ftest assembly">
		<csc target = "library" output = "bin/FullTrust${extension}.dll" keyfile = "Smokey.keys"
			debug = "${debug}" checked = "${checked}" optimize = "${optimize}">
			<sources basedir = "extras/miscevil">
				<include name = "AssemblyVersion.cs"/>
				<include name = "FullTrust.cs"/>
			</sources>
		</csc>
	</target>
		
	<target name = "APTCA" depends = "versionMiscEvil,FullTrust" description = "compiles the APTCA ftest assembly">
		<csc target = "library" output = "bin/APTCA${extension}.dll"
			debug = "${debug}" checked = "${checked}" optimize = "${optimize}">
			<references>
				<include name = "bin/FullTrust_d.dll"/>
			</references>
			<resources basedir = "extras/miscevil">
				<include name = "APTCA.xml"/>
			</resources>
			<sources basedir = "extras/miscevil">
				<include name = "AssemblyVersion.cs"/>
				<include name = "APTCA.cs"/>
			</sources>
		</csc>
	</target>
				
	<target name = "APTCA2" depends = "versionMiscEvil,FullTrust" description = "compiles the APTCA2 ftest assembly">
		<csc target = "library" output = "bin/APTCA2${extension}.dll"
			debug = "${debug}" checked = "${checked}" optimize = "${optimize}">
			<references>
				<include name = "bin/FullTrust_d.dll"/>
			</references>
			<resources basedir = "extras/miscevil">
				<include name = "APTCA2.xml"/>
			</resources>
			<sources basedir = "extras/miscevil">
				<include name = "AssemblyVersion.cs"/>
				<include name = "APTCA2.cs"/>
			</sources>
		</csc>
	</target>
				
	<target name = "APTCA3" depends = "versionMiscEvil,FullTrust" description = "compiles the APTCA3 ftest assembly">
		<csc target = "library" output = "bin/APTCA3${extension}.dll"
			debug = "${debug}" optimize = "${optimize}">
			<references>
				<include name = "bin/FullTrust_d.dll"/>
			</references>
			<resources basedir = "extras/miscevil">
				<include name = "APTCA3.xml"/>
			</resources>
			<sources basedir = "extras/miscevil">
				<include name = "AssemblyVersion.cs"/>
				<include name = "APTCA3.cs"/>
			</sources>
		</csc>
	</target>
				
	<!-- build the functional test -->
	<target name = "versionFunctest">
		<exec program = "BumpBuildNumber.sh" failonerror = "true" commandline = "extras/functest/AssemblyVersion.cs"/>
	</target>
		
	<target name = "functest" depends = "versionFunctest,app" description = "compiles the smokey functional test">
		<csc target = "exe" output = "bin/functest${extension}.exe"
		debug = "${debug}" checked = "${checked}" optimize = "${optimize}" warnaserror = "true">
			<resources basedir = "extras/functest">
				<include name = "*.xml"/>
			</resources>
			<sources>
				<include name = "extras/functest/*.cs"/>
				<include name = "source/framework/DBC.cs"/>
				<include name = "source/framework/DisableRuleAttribute.cs"/>
				<include name = "source/internal/GetOptions.cs"/>
			</sources>
		</csc>
	</target>
				
	<!-- build everything -->
	<target name = "all" depends = "app,tests,evildoer,APTCA,APTCA2,APTCA3,NoSecurity,FullTrust,functest" description = "compiles the smokey exe, unit tests, and evildoer">
	</target>
	
	<!-- run the unit tests -->
	<target name = "test" depends = "tests" description = "runs the unit tests">
		<!-- nant provides an nunit2 task, but we don't get stack crawls if we use it...-->
		<exec program = "nunit-console2" failonerror = "true" commandline = 
			"-config=bin/tests${extension}.dll.config bin/tests${extension}.dll"/>
	</target>
		
	<target name = "test1" depends = "tests" description = "runs one unit test">
		<!-- nant provides an nunit2 task, but we don't get stack crawls if we use it...-->
		<exec program = "nunit-console2" failonerror = "true" commandline = 
			"-nologo -fixture=Smokey.Tests.DoubleCheckedLocking1Test -config=bin/tests${extension}.dll.config bin/tests${extension}.dll"/>
	</target>
		
	<!-- run the functional test -->
	<property name = "app_path" value = "bin/smokey${extension}.exe"/>	
	<property name = "evil_path" value = "bin/evildoer${extension}.dll"/>
	<property name = "NoSecurity_path" value = "bin/NoSecurity${extension}.exe"/>
	<property name = "APTCA_path" value = "bin/APTCA${extension}.dll"/>
	<property name = "APTCA2_path" value = "bin/APTCA2${extension}.dll"/>
	<property name = "APTCA3_path" value = "bin/APTCA3${extension}.dll"/>
	<property name = "functest_path" value = "bin/functest${extension}.exe"/>
	<target name = "ftest" depends = "evildoer,APTCA,APTCA2,APTCA3,NoSecurity,functest" description = "run the functional test">
		<exec program = "mono" failonerror = "true" commandline = "--debug ${path::get-full-path(functest_path)} -exe:${path::get-full-path(app_path)} -asm:${path::get-full-path(evil_path)},${path::get-full-path(APTCA_path)},${path::get-full-path(NoSecurity_path)},${path::get-full-path(APTCA2_path)},${path::get-full-path(APTCA3_path)}"/>
	</target>
						
	<!-- smoke test smokey -->
	<target name = "smoke" depends = "app" description = "runs smokey on smokey">
		<exec program = "mono" failonerror = "true" commandline = "--debug ${path::get-full-path(app_path)} 
		-set:ignoreList:IgnoreList.txt -set:naming:jurassic -exclude-name:D1002@DoCheckJurassicFields  
		-exclude-check:D1031 -exclude-name:C1000@Smokey.Internal.HtmlHelpers -exclude-check:D1024 -exclude-check:D1015 
		${path::get-full-path(app_path)}"/>
	</target>
		
	<!-- tar and zip the binaries plus the source code -->
	<target name = "tar_binary" depends = "app" description = "tar and zip the smokey.exe">
		<tar destfile = "smokey_bin-1.1.2.tar.gz" compression = "GZip">
			<fileset basedir = "bin" prefix = "bin">
				<include name="smokey${extension}.exe"/>
			</fileset>
			<fileset basedir = ".">
				<include name = "CHANGES"/>		
				<include name = "CHANGE_LOG"/>		
				<include name = "README"/>		
			</fileset>
			<fileset basedir = "." filemode = "755">
				<include name = "install.sh"/>
				<include name = "uninstall.sh"/>
			</fileset>
		</tar>
	</target>
		
	<target name = "tar_source" description = "tar and zip the source code">
		<tar destfile = "smokey_src-1.1.2.tar.gz" compression = "GZip">
			<fileset basedir = "bin" prefix = "bin">
				<include name = "smokey_d.exe.config"/>		
				<include name = "tests_d.dll.config"/>		
			</fileset>
			<fileset basedir = ".">
				<include name = "AUTHORS"/>		
				<include name = "CHANGES"/>		
				<include name = "CHANGE_LOG"/>		
				<include name = "README"/>		
				<include name = "MIT.X11"/>
				<include name = "IgnoreList.txt"/>
				<include name = "nant.build"/>
				<include name = "SysIgnore.txt"/>
			</fileset>
			<fileset basedir = "." filemode = "755">
				<include name = "BumpBuildNumber.sh"/>		
				<include name = "gen_docs.sh"/>
				<include name = "gen_match.py"/>
				<include name = "install.sh"/>
				<include name = "uninstall.sh"/>
			</fileset>
			<fileset basedir = "extras" prefix = "extras">
				<include name="**/*"/>
			</fileset>
			<fileset basedir = "source" prefix = "source">			
				<include name="**/*"/>
			</fileset>
			<fileset basedir = "custom" prefix = "custom">			
				<include name="**/*"/>
			</fileset>
		</tar>
	</target>
		
	<target name = "tar" depends = "clean,tar_binary,tar_source" description = "tar and zip the release binaries and source code">
	</target>
		
	<!-- delete all the generated files -->
	<target name = "clean" description = "remove all generated files">
		<delete>
			<fileset basedir = "bin">
				<include name="*.exe"/> 
				<include name="*.dll"/>
				<include name="*.mdb"/>
				<include name="*.log"/>
			</fileset>
		</delete>
	</target>
</project>