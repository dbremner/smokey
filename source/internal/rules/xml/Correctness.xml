<!-- This category is for code that is broken. The severity of these rules should
normally be Error. -->
<Violations>
	<Violation checkID = "C1000" severity = "Warning" breaking = "false">	<!-- get a fair number of false positives here so we use Warning instead of Error -->
		<Translation lang = "en" typeName = "StringSpelling" category = "Correctness">			
			<Cause>
			The above words were misspelled.
			</Cause>
	
			<Description>
			....
			</Description>
	
			<Fix>
			Correct the spelling or use the -set:dictionary command line switch.
			</Fix>
		</Translation>
	</Violation>	

	<Violation checkID = "C1001" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "InfiniteRecursion" category = "Correctness">			
			<Cause>
			A method is directly calling itself an infinite number of times.
			</Cause>
	
			<Description>
			A method that is recursively calling itself an infinite number of times
			will use an infinite amount of CPU and stack space. This is rarely a
			good thing.
			</Description>
	
			<Fix>
			Either remove the recursion or add a base case to terminate the recursion.
			</Fix>
	
			<CSharp>
			internal sealed class Recursion
			{								
				public override int GetHashCode()
				{
					return base.GetHashCode();	// this is fine, but would be bad without the base.
				}

				public static int Fibonacci(int n)
				{
					if (n &lt; 2)		// base case terminates the recursion
						return n;
					
					return Fibonacci(n - 1) + Fibonacci(n - 2);
				}
			} 
			</CSharp>
		</Translation>
	</Violation> 
	
	<Violation checkID = "C1002" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "MalformedFormatString" category = "Correctness">			
			<Cause>
			A method call is being made with a format string, but the number of arguments
			in the format does not match the number of actual arguments.
			</Cause>
	
			<Description>
			...
			</Description>
	
			<Fix>
			Make the format string consistent with the arguments.
			</Fix>
	
			<CSharp>
			internal sealed class Point
			{
				public override string ToString()
				{
					// The arguments in the format string don't have to be in
					// order but their count must match the actual argument count.
					return string.Format("x = {1}, y = {0}", m_y, m_x);
				}
				
				public string ToString2()
				{
					// It is, however, permissible to reuse arguments.
					return string.Format("y^2 = {0}*{0}", m_y);
				}
				
				private int m_x, m_y;
			}			
			</CSharp>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1003" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "NullDeref" category = "Correctness">			
			<Cause>
			A method is using a reference which may be null.
			</Cause>
	
			<Description>
			If a reference is initialized to null then all of the code paths leading
			to the use of that method have to set it to a non-null value.
			</Description>
	
			<Fix>
			Either check to see if the reference is null before using it or ensure that
			it is always set before using it.
			</Fix>
	
			<CSharp>
			using System.IO;
			
			internal static class Create
			{								
				public static StreamWriter Writer(string path, bool truncate, bool open)
				{
					FileStream stream = null;
					StreamWriter writer = null;         
					
					if (truncate &amp;&amp; open)
						stream = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Write);
					else
						stream = new FileStream(path, FileMode.Truncate, FileAccess.Write);
				
					if (stream != null)		// need the if because not all code paths create a stream
					{
						stream.Seek(0, SeekOrigin.End); 
						writer = new StreamWriter(stream);         
					}
					
					return writer;
				}
			} 
			</CSharp>
		</Translation>
	</Violation>

	<Violation checkID = "C1004" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "InternalError" category = "Correctness">			
			<Cause>
			A rule has failed to run.
			</Cause>
	
			<Description>
			The rule has a bug and has failed via an exception.
			</Description>
	
			<Fix>
			Contact the author of the rule.
			</Fix>
		</Translation>
	</Violation>	
		
	<Violation checkID = "C1006" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "NoSerializableAttribute" category = "Correctness">			
			<Cause>
			A type implements System.Runtime.Serialization.ISerializable,
			but is not marked with System.SerializableAttribute. 
			</Cause>
		
			<Description>
			To be recognized by the runtime as serializable types must be marked with 
			SerializableAttribute even if they use custom serialization via ISerializable.
			</Description>
	
			<Fix>
			Decorate the type with System.SerializableAttribute.
			</Fix>
	
			<CSharp>
			using System.Runtime.Serialization;
			using System.Security.Permissions;
			
			[Serializable]
			public class Customer : ISerializable
			{
				public Customer(string name)
				{
					m_name = name;
				}
				
				protected Customer(SerializationInfo info, StreamingContext context)
				{
					m_name = info.GetString("name");
				}
				
				[SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
				public void GetObjectData(SerializationInfo info, StreamingContext context)
				{
					info.AddValue("name", m_name);
				}
				
				private string m_name;
			}
			</CSharp>
		</Translation>
	</Violation>
	
	<Violation checkID = "C1007" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "OptionalSerialization" category = "Correctness">			
			<Cause>
			A field is decorated with OptionalFieldAttribute, but no method in the declaring
			type is decorated with OnDeserializingAttribute or OnDeserializedAttribute. 
			</Cause>
		
			<Description>	
			OptionalFieldAttribute affects deserialization but not serialization. When an
			object without the optional field is deserialized the new object is zero initialized
			with FormatterServices.GetUninitializedObject and then the fields which are present
			in the data stream are deserialized.
			</Description>
	
			<Fix>
			Use OnDeserializingAttribute or OnDeserializedAttribute to ensure optional fields
			are correctly initialized.
			</Fix>
	
			<CSharp>
			using System.Reflection;
			using System.Runtime.Serialization;
			
			[Serializable]
			internal class Optional
			{		
				[OnDeserialized]
				protected void OnDeserialized(StreamingContext context)
				{
					// Note that you may use the required deserialized
					// fields to set optional fields.
					m_optional = 5;
				}
			
				[OptionalField(VersionAdded = 2)]
				private int m_optional = 5;		// this is not done when the object is deserialized
			}
			</CSharp>
		</Translation>
	</Violation>
	
	<Violation checkID = "C1008" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "NanTest" category = "Correctness">			
			<Cause>
			An equality or inequality operator operand is System.Single.NaN or System.Double.NaN. 
			</Cause>
		
			<Description>	
			An IEEE-754 NaN is a special value returned by expressions which have no meaningful
			value (such as 0.0/0.0 or sqrt(-1)). Expressions involving NaNs also produce NaN and
			NaNs never compare equal to other values (not even themselves).
			</Description>
	
			<Fix>
			Use System.Single.IsNaN(System.Single) or System.Double.IsNaN(System.Double) to check
			to see if a value is a NaN.
			</Fix>
		</Translation>
	</Violation>
	
	<Violation checkID = "C1009" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "IntegerDivision" category = "Correctness">			
			<Cause>
			The result of an integer division is cast to a float or double. 
			</Cause>
		
			<Description>	
			This is usually an error.
			</Description>
	
			<Fix>
			If the divide should be a floating point divide then cast one of the arguments to
			float or double before doing the divide. If the divide should be an integer divide
			assign the result to a temporary integer variable.
			</Fix>
	
			<CSharp>
			internal static class Math
			{		
				public static double Ratio(int n, int m)
				{
					// Need an explicit cast so that we do a floating point divide.
					// If we don't do this stuff like 2/5 == 0 instead of 0.4.
					return (double) n / m;
				}
			}
			</CSharp>
		</Translation>
	</Violation>
	
	<Violation checkID = "C1010" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "IntegerMultiply" category = "Correctness">			
			<Cause>
			The result of an integer multiplication is cast to a long. 
			</Cause>
		
			<Description>	
			In general it's best to do the multiply using longs to reduce the chance of overflow.
			</Description>
	
			<Fix>
			Cast one of the operands to a long before doing the multiplication.
			</Fix>
		</Translation>
	</Violation>
	
	<Violation checkID = "C1011" severity = "Nitpick" breaking = "false">
		<Translation lang = "en" typeName = "Average" category = "Correctness">			
			<Cause>
			Code like "(a + b)/2" or "(a + b) >> 1" is used where a and b are both ints. 
			</Cause>
		
			<Description>	
			The standard average algorithm may overflow if a and b are large. See
			&lt;http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html&gt; 
			for a real world example of this at Google.
			</Description>
	
			<Fix>
			The simplest fix is to rewrite the code like this: "a + ((b - a)/2)".
			</Fix>
		</Translation>	
	</Violation>

	<Violation checkID = "C1012" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "StringIndexOf" category = "Correctness">			
			<Cause>
			String.IndexOf or IndexOfAny is called and the code checks for a positive result.
			</Cause>
		
			<Description>	
			This may be an off by one error.
			</Description>
	
			<Fix>
			Instead of something like text.IndexOf(':') use text.IndexOf(':', 1);
			</Fix>
		</Translation>	
	</Violation>

	<Violation checkID = "C1013" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "ArrayIndexOf" category = "Correctness">			
			<Cause>
			Array.IndexOf is called and the code checks for a positive result.
			</Cause>
		
			<Description>	
			This may be an off by one error.
			</Description>
	
			<Fix>
			If you really don't want to check index zero then use the IndexOf overload that
			allows you to specify a starting index.
			</Fix>
		</Translation>	
	</Violation>

	<Violation checkID = "C1014" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "UnusedStore" category = "Correctness">			
			<Cause>
			A value is stored into a local variable, argument, or field
			followed immediately by another store into the same location.
			</Cause>
		
			<Description>	
			This rule will fire for code that computes a value, saves it, and then throws
			it away. For example, "i = i++" will cause the rule to fire.
			</Description>
	
			<Fix>
			Don't perform work that you don't need to and don't save results that you never use.
			</Fix>
		</Translation>	
	</Violation>

	<Violation checkID = "C1015" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "BadRegEx" category = "Correctness">			
			<Cause>
			A regular expression is malformed.
			</Cause>
		
			<Description>	
			See &lt;http://msdn2.microsoft.com/en-us/library/az24scfc(vs.71).aspx&gt;
			for information on .NET regex syntax.
			</Description>
	
			<Fix>
			Fix the expression.
			</Fix>
		</Translation>	
	</Violation>

	<Violation checkID = "C1016" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "UnusedNew" category = "Correctness">			
			<Cause>
			A new object is created but the reference to the object isn't saved or used.
			</Cause>
		
			<Description>	
			This rule will fire if you do stuff like "new Exception("oops")" instead of
			"throw new Exception("oops")". Another common error is not saving a reference
			to a new Timer object which is a problem because the timer won't fire if it
			is garbage collected early. 
			</Description>
	
			<Fix>
			It's poor style to create an object simply for the side effects, but if that's
			what you want to do assign the result to Unused.Value.
			</Fix>
		</Translation>	
	</Violation>

	<Violation checkID = "C1017" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "NullField" category = "Correctness">			
			<Cause>
			A private field is never set to a non-null value.
			</Cause>
		
			<Description>	
			The C# compiler will issue a warning if the field is never used, but it will
			not issue a warning if the field is used but never initialized.
			</Description>
	
			<Fix>
			Either remove the field or initialize it properly.
			</Fix>
		</Translation>	
	</Violation>

	<Violation checkID = "C1018" severity = "Nitpick" breaking = "false">
		<Translation lang = "en" typeName = "IgnoredReturn" category = "Correctness">			
			<Cause>
			A method is called but the method's return value is not used.
			</Cause>
		
			<Description>	
			In general return values should not be ignored in C#.
			</Description>
	
			<Fix>
			Unlike C there is no built-in mechanism for explicitly ignoring return
			values in C#. You can assign it to a temporary (although you will get a
			warning because the temporary isn't used) or use an Unused class as in
			the code below.
			</Fix>
	
			<CSharp>
			internal static class Unused
			{
				public static object Value 
				{
					[DisableRule("C1022", "UseSetterValue")]	
					set {}
				}
			}

			internal static class Printer
			{		
				public static void Print2(string s, string t)
				{
					Unused.Value = Print(s + t);	// ignore return value because it's always true
				}

				public static bool Print(string s)
				{
					Console.WriteLine(s);
					return true;
				}
			}
			</CSharp>
		</Translation>	
	</Violation>

	<Violation checkID = "C1019" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "UnrelatedEquals" category = "Correctness">			
			<Cause>
			Equals is called with two unrelated types.
			</Cause>
		
			<Description>	
			This will always cause Equals to return false unless Equals is overridden to
			special case the other type which is rarely a good idea.
			</Description>
	
			<Fix>
			Fix the code so that it compares objects which are truly comparable.
			</Fix>
		</Translation>	
	</Violation>

	<Violation checkID = "C1020" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "AttributeSpelling" category = "Correctness">			
			<Cause>
			The above words were misspelled.
			</Cause>
	
			<Description>
			....
			</Description>
	
			<Fix>
			Correct the spelling or use the -set:dictionary command line switch.
			</Fix>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1021" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "RecursiveEquality" category = "Correctness">			
			<Cause>
			An operator== or operator!= method calls itself.
			</Cause>
		
			<Description>
			This is usually caused by the method directly comparing an argument to null.
			</Description>
	
			<Fix>
			Cast the argument to System.Object before comparing to null.
			</Fix>
	
			<CSharp>
			internal sealed class Customer : IEquatable&lt;Customer&gt;
			{		
				public override bool Equals(object rhsObj)
				{
					if (rhsObj == null)			// as is a little expensive, so skip it if we can
						return false;
					
					Customer rhs = rhsObj as Customer;
					return this == rhs;
				}
					
				public bool Equals(Customer rhs)	// provide a typed overload for efficiency
				{
					return this == rhs;
				}

				public static bool operator==(Customer lhs, Customer rhs)
				{
					// If both are null, or both are the same instance, return true.
					if (object.ReferenceEquals(lhs, rhs))
						return true;
					
					// If one is null, but not both, return false. If the casts were
					// missing this would generate a recursive call to ourselves.
					if ((object) lhs == null || (object) rhs == null)
						return false;
					
					// Return true if the fields match:
					return lhs.name == rhs.name &amp;&amp; lhs.address == rhs.address;
				}
				
				public static bool operator!=(Customer lhs, Customer rhs)
				{
					return !(lhs == rhs);
				}
				
				public override int GetHashCode()
				{
					int hash;
					
					unchecked
					{
						hash = 7*name.GetHashCode() + 11*address.GetHashCode();
					}
					
					return hash;
				}
				
				private string name = "ted";
				private string address = "main street";
			}
			</CSharp>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1022" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "UseSetterValue" category = "Correctness">			
			<Cause>
			A property setter is not using the value argument.
			</Cause>
		
			<Description>
			...
			</Description>
	
			<Fix>
			Use the argument somehow. If for some reason you don't want to make use of it
			you can use Unused.Value as in the code below.
			</Fix>
	
			<CSharp>
			internal static class Unused
			{
				public static object Value 
				{
					[DisableRule("C1022", "UseSetterValue")]	
					set {}
				}
			}

			internal sealed class Ship
			{		
				public string Name 
				{
					get {return m_name;}
					set {m_name = value;}
				}
				
				// We don't use the Captain property at the moment so the setter
				// does nothing. Of course, it's usually better to omit code that
				// doesn't do anything...
				public string Captain 
				{
					get {return string.Empty;}
					set {Unused.Value = value;}
				}
				
				private string m_name;
			}
			</CSharp>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1023" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "UnprotectedEvent" category = "Correctness">			
			<Cause>
			An event is fired without first checking to see that the event is non-null,
			or the check uses the wrong event.
			</Cause>
		
			<Description>
			Events are null until a handler is added to them so firing them without a
			null check is dangerous.
			</Description>
	
			<Fix>
			Check for null before firing the event.
			</Fix>
	
			<CSharp>
			internal sealed class Customer
			{		
				public event EventHandler NameChanged;
				
				public string Name 
				{
					get 
					{
						return m_name;
					}
					
					set 
					{
						if (value != m_name)
						{
							m_name = value;
							
							// To be safe we need to check for null.
							if (NameChanged != null)
								NameChanged(this, EventArgs.Empty);
						}
					}
				}
								
				private string m_name;
			}
			</CSharp>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1024" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "IntZeroDivide" category = "Correctness">			
			<Cause>
			An integer divide was done with a zero denominator.
			</Cause>
		
			<Description>
			This will result in an System.DivideByZeroException at runtime (even if
			arithmetic is unchecked).
			</Description>
	
			<Fix>
			Don't do integer divide by zeros.
			</Fix>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1025" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "FloatZeroDivide" category = "Correctness">			
			<Cause>
			A floating point divide was done with a zero denominator.
			</Cause>
		
			<Description>
			If the numerator is non-zero this will result in a positive or negative infinity.
			If the numerator is zero this will result in a NaN.
			</Description>
	
			<Fix>
			The code is very likely wrong.
			</Fix>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1026" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "NoStaticRemove" category = "Correctness">			
			<Cause>
			A class has a private static collection, the elements are reference types (but
			not WeakReference), adds elements to it outside the classes constructors,
			and never removes elements from the collection.
			</Cause>
		
			<Description>
			None of the objects in the collection or objects referenced by those objects 
			will be garbage collected.
			</Description>
	
			<Fix>
			The simplest fix is to change the collection to use the WeakReference type. Even
			better, of course, is to remove elements when they are no longer used.
			</Fix>
		</Translation>
	</Violation>	
		
	<Violation checkID = "C1028" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "InconsistentProperty" category = "Correctness">			
			<Cause>
			A property getter does nothing but return a field, the property setter does nothing
			but set a field, but the two use different fields.
			</Cause>
		
			<Description>
			Getters and setters should pretty much always use the same fields.
			</Description>
	
			<Fix>
			Fix the code, or in the unlikely event that the code is correct, use DisableRuleAttribute
			on the getter.
			</Fix>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1029" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "DoubleCheckedLocking" category = "Correctness">			
			<Cause>
			A static method matches the double checked locking pattern: it has one lock in
			which a field is checked for null, if it is null it is set to a newly created instance, 
			and the method returns the field. But the lock is not protected by a second null check.
			</Cause>
		
			<Description>
			This pattern (see the code below) allows singletons to be safely and efficiently
			used in multi-threaded code. It is, however, a bit tricky so it's strongly recommended
			that you follow the pattern. This rule will catch two common variants: 1) The first
			if uses a boolean field. This is incorrect because the two reads outside the lock (of the 
			boolean and the instance fields) may be reordered. 2) The if outside the lock is absent.
			This code will work but it's inefficient because we always have to acquire the lock.
			See &lt;http://www.bluebytesoftware.com/blog/PermaLink,guid,543d89ad-8d57-4a51-b7c9-a821e3992bf6.aspx&gt; 
			for more details.
			</Description>
	
			<Fix>
			Follow the pattern below.
			</Fix>
	
			<CSharp>
			using System.Threading;
			
			internal sealed class Singleton 
			{
				// Private so we that our instance can only be created via Instance.
				private Singleton() 
				{
				}
				
				// Efficient and safe way to implement a thread-safe singleton. Note that 
				// this works because locks act as memory barriers in .NET 2.0.
				public static Singleton Instance
				{
					get
					{
						if (ms_instance == null) 
						{
							lock (ms_lock) 
							{
								if (ms_instance == null) 
								{
									ms_instance = new Singleton();
								}
							}
						}
						
						return ms_instance;
					}
				}

				private static Singleton ms_instance;
				private static object ms_lock = new object();
			}			
			</CSharp>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1030" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "UnusedArg" category = "Correctness">			
			<Cause>
			A non-empty method doesn't use all of its arguments.
			</Cause>
		
			<Description>
			In general arguments should be used.
			</Description>
	
			<Fix>
			Decorate the method with DisableRuleAttribute or use the argument somehow.
			</Fix>
	
			<CSharp>
			internal static class Unused
			{
				public static void Arg(params object[] args)
				{
				}
			}
			
			internal static class Worker 
			{
				public static int Work(int x, int hint)
				{
					Unused.Value = hint;
					
					return x;
				}
			}			
			</CSharp>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1031" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "ArgumentException1" category = "Correctness">			
			<Cause>
			A System.ArgumentException(string) constructor is called with a string literal, 
			but the string is an argument name.
			</Cause>
		
			<Description>
			Use a better exception string.
			</Description>
	
			<Fix>
			Provide some sort of indication of the problem, for example "x is negative"
			instead of just "x".
			</Fix>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1032" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "ArgumentException2" category = "Correctness">			
			<Cause>
			A System.ArgumentNullException(string) or System.ArgumentOutOfRangeException(string) 
			constructor is called with a string literal, but the string is not an argument name.
			</Cause>
		
			<Description>
			ArgumentNullException and ArgumentOutOfRangeException should be called with the
			name of an argument which will then be used to create a message.
			</Description>
	
			<Fix>
			Use an argument name.
			</Fix>
		</Translation>
	</Violation>	
		
	<Violation checkID = "C1034" severity = "Error" breaking = "true">
		<Translation lang = "en" typeName = "InvalidEnumFlags" category = "Correctness">			
			<Cause>
			An enum is decorated with FlagsAttribute, but the enum values are all sequential.
			</Cause>
		
			<Description>
			FlagsAttribute is intended for enums where the values can be combined with bit
			field ORing. Sequential values cannot be ORed together like this in any useful
			way.
			</Description>
	
			<Fix>
			Either remove the attribute or change the values (e.g. instead of 1, 2, 3, 4 use
			1, 2, 4, 8).
			</Fix>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1035" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "HashButNoEquals" category = "Correctness">			
			<Cause>
			A type overrides GetHashCode, but not Equals.
			</Cause>
		
			<Description>
			It's expected that if two instances have the same hash code they will compare
			equal. If this is not true types like Dictionary and Hashtable may break in
			subtle ways.
			</Description>
	
			<Fix>
			Override Equals and ensure that Equals and GetHashCode are consistent.
			</Fix>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1036" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "EqualsMissesState" category = "Correctness">			
			<Cause>
			An Equals or operator== method checks fields, but does not check a field 
			which is exposed via a trivial and public get/set property.
			</Cause>
		
			<Description>
			Two objects which have differing visible states should not compare the same.
			</Description>
	
			<Fix>
			Change either the equality method or the property.
			</Fix>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1037" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "RedundantOperand" category = "Correctness">			
			<Cause>
			A binary operator or method is invoked but both arguments are computed
			using identical code.
			</Cause>
		
			<Description>
			This rule checks the following operators: /, %, -, &amp;, ^, |, &lt;
			&lt;=, ==, &gt; , &gt;= and the following methods: Math.Max, Math.Min, 
			Object.Equals(Object, Object), and Object.ReferenceEquals.
			</Description>
	
			<Fix>
			This code should be reviewed carefully to determine whether one of the arguments
			is wrong. If not the expression can be replaced by a constant or the argument.
			</Fix>
		</Translation>
	</Violation>	
	
	<Violation checkID = "C1038" severity = "Error" breaking = "false">
		<Translation lang = "en" typeName = "ConstantResult" category = "Correctness">			
			<Cause>
			A method always returns a constant value.
			</Cause>
		
			<Description>
			This rule checks the following methods: Equals, GetHashCode, CompareTo,
			and overloaded relational operators.
			</Description>
	
			<Fix>
			Either fix the method so that it returns something reasonable, remove the method,
			or add an assert/throw to ensure that the method is never called.
			</Fix>
		</Translation>
	</Violation>	
</Violations>		
