<Violations>
	<Violation checkID = "G1000" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "DataLocale" category = "Globalization">			
			<Cause>
			A method created a System.Data.DataTable or System.Data.DataSet instance, but 
			did not set the Locale property.
			</Cause>
	
			<Description>
			The locale affects how the data is presented to the user. For example, number
			formatting, currency symbols, and sort order are all affected by the locale.
			By default the DataTable and DataSet locales are set to the current culture. If
			the data may be shared across cultures the invariant culture should normally be
			used.
			</Description>
	
			<Fix>
			Explicitly set the culture. Note that
			you can disable this rule using the -not-localized command line switch.
			</Fix>
	
			<CSharp>
			using System.Data;
			using System.Globalization;
			
			public static class Factory
			{				
				public static DataTable MakeTable()
				{
					DataTable table = new DataTable("Customers");
					table.Locale = CultureInfo.InvariantCulture;
					
					DataColumn keyColumn = table.Columns.Add("ID", typeof(int));
					keyColumn.AllowDBNull = false;
					keyColumn.Unique = true;
					
					table.Columns.Add("LastName", typeof(string));
					table.Columns.Add("FirstName", typeof(string));

					return table;
				}
			}
			</CSharp>
		</Translation>
	</Violation>

	<Violation checkID = "G1001" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "MessageBoxOptions" category = "Globalization">			
			<Cause>
			A method calls System.Windows.Forms.MessageBox.Show without specifying 
			MessageBoxOptions.
			</Cause>
	
			<Description>
			To display the text properly for cultures that use a right to left reading
			order the RightAlign and RtlReading members of MessageBoxOptions must be
			used.
			</Description>
	
			<Fix>
			Use the Show overload that takes a MessageBoxOptions and set RightAlign and
			RtlReading using the containing control. Note that
			you can disable this rule using the -not-localized command line switch.
			</Fix>
	
			<CSharp>
			using System.Globalization;
			using System.Windows.Forms;
			
			public static class Dialogs
			{				
				public static DialogResult ShowMessageBox(Control owner, string text, string caption)
				{
					MessageBoxOptions options = 0;
					if (owner != null)
					{
						if (owner.RightToLeft == RightToLeft.Yes)
							options |= MessageBoxOptions.RtlReading | MessageBoxOptions.RightAlign;
					}
					else if (CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft)
						options |= MessageBoxOptions.RtlReading | MessageBoxOptions.RightAlign;
					
					return MessageBox.Show(
						owner, 
						text, 
						caption,
						MessageBoxButtons.OK, 
						MessageBoxIcon.Information, 
						MessageBoxDefaultButton.Button1, 
						options);
				}
			}
			</CSharp>
		</Translation>
	</Violation>

	<Violation checkID = "G1002" severity = "Warning" breaking = "false">
		<Translation lang = "en" typeName = "NonLocalizedGui" category = "Globalization">			
			<Cause>
			A method calls a gui method using a string literal which contains letters.
			</Cause>
	
			<Description>
			This rule checks the following properties:
			* System.Windows.Forms.*::set_BalloonTipText
			* System.Windows.Forms.*::set_BalloonTipTitle
			* System.Windows.Forms.*::set_Caption
			* System.Windows.Forms.*::set_Description
			* System.Windows.Forms.*::set_ErrorText
			* System.Windows.Forms.*::set_HeaderText
			* System.Windows.Forms.*::set_ShortcutKeyDisplayString
			* System.Windows.Forms.*::set_Text
			* System.Windows.Forms.*::set_Title
			* System.Windows.Forms.*::set_ToolTipText
			* Gtk.*::set_Comments
			* Gtk.*::set_Copyright
			* Gtk.*::set_CustomTabLabel
			* Gtk.*::set_Label
			* Gtk.*::set_MenuLabel
			* Gtk.*::set_SecondaryText
			* Gtk.*::set_ShortLabel
			* Gtk.*::set_TabLabel
			* Gtk.*::set_TearoffTitle
			* Gtk.*::set_Title
			* Gtk.*::set_TranslatorCredits
			* Gtk.*::set_WebsiteLabel
			
			The following methods:
			* System.Void System.Windows.Forms.Help::ShowPopup(System.Windows.Forms.Control,System.String,System.Drawing.Point)
			* System.Windows.Forms.DialogResult System.Windows.Forms.MessageBox::Show(*
			* System.Void System.Windows.Forms.NotifyIcon::ShowBalloonTip(System.Int32,System.String,System.String,System.Windows.Forms.ToolTipIcon)
			* System.Void System.Windows.Forms.TextRenderer::DrawText(*
			* System.Void System.Windows.Forms.ToolTip::Show(*
			* Gtk.Button Gtk.*::NewWithLabel(System.String)
			* Gtk.CellView Gtk.*::NewWithText(System.String)
			
			In addition the rule checks winforms and gtk constructors with a string
			argument named caption, displayname, displaytext, header, initialtext, 
			label, message, text, or title. When matching arguments underscores are removed and
			the name is lower cased.
			
			You can also check custom methods using the "localize" key in the config file or
			the -set command line switch. The value is a semicolon seperated list of method names
			of the form {namespace}.{type name}::{method name}. Note that the method name can
			be ".ctor" if you want to match a constructor. For example, 
			"-set:localize:System.Console::WriteLine". String literals are flagged if they are
			assigned to an argument with one of the above names.
			</Description>
	
			<Fix>
			The standard ways to localize are Mono.Unix.Catalog (see 
			&lt;http://www.mono-project.com/I18N_with_Mono.Unix&gt;) and
			System.Resources.ResourceManager (see 
			&lt;http://www.ondotnet.com/pub/a/dotnet/2002/09/30/manager.html&gt;). Note that
			you can disable this rule using the -not-localized command line switch.
			</Fix>
		</Translation>
	</Violation>
</Violations>
